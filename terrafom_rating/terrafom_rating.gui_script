local C = require "utils.message_ids"

local function update_ui(self)
	for player_id, player in pairs(self.players) do
		if player.initialized then
			gui.set_text(gui.get_node("player" .. player_id), player.rating)
		end
	end
end

local function update_initialization(self)
	for player_id, player in pairs(self.players) do
		local player_value = gui.get_node("player" .. player_id)
		local player_box = gui.get_node("player_box" .. player_id)
		gui.set_enabled(player_value, player.initialized)
		gui.set_enabled(player_box, player.initialized)
	end
end

local function create_player(is_enabled)
	return { initialized = is_enabled, rating = 20 }
end

function init(self)
	self.players = {
		[1] = create_player(true),
		[2] = create_player(false),
		[3] = create_player(false),
		[4] = create_player(false),
		[5] = create_player(false),
	}
	
	update_initialization(self)
end

function on_input(self, action_id, action)
	-- print("ratting ", action_id)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(C.PLAYER_RATING_CHANGED) then
		assert(self.players[message.player_id].initialized, "player is not initialized")
		self.players[message.player_id].rating = self.players[message.player_id].rating + message.rating_changed
		print("rating for player " .. message.player_id .. " " .. self.players[message.player_id].rating)
		update_ui(self)
	end
end
