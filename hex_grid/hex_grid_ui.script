
local C = require "utils.message_ids"
local UTILS = require "utils.helpers"
local ASSERTS = require "utils.assertions"
local EVENT_REGISTRY = require "utils.event_regisrty"
local HEX_GRID_UTILS = require "hex_grid.hex_grid_utils"

go.property("reciver_url", msg.url())
go.property("wannted_height_of_single_hex", 64)

local clickable = true
local on_click = function () end
local grid_width = 9
local grid_height = 9 
local height
local size
local horizontal_spacing
local vertical_spacing
local scale
local position_for_node_x1_y1

-- usage coordinate_table[row][column]
local coordinate_table = {}
-- row index to column values
local excluded_coords = { [1] = {1,2,8,9}, [2] = {1,2,9}, [3] = {1,9}, [4] = {1}, [5] = {}, [6] = {1}, [7] = {1,9}, [8] = {2,9}, [9] = {2,8,9} }
local tile_type_to_image = {
	[C.TILE_TYPE_OCEAN] = "Ocean", 
	[C.TILE_TYPE_TREE] = "Tree", 
	[C.TILE_TYPE_CITY] = "City", 
	[C.TILE_TYPE_EMPTY_OCEAN] = "Empty_ocean",
	[C.TILE_TYPE_EMPTY] = "Empty",
}
local resource_to_image = {
	[C.RECOURCE_PLANT] = "Plant",
	[C.RECOURCE_STEEL] = "Steel", 
	[C.RECOURCE_TITANIUM] = "Titanium", 
	[C.PLAYER_DRAW_CARD] = "Draw", 
}

local function get_hex_id(row, column)
	return coordinate_table[row] and coordinate_table[row][column] and coordinate_table[row][column].hex_id
end

local function data(column, row)
	return {column = column, row = row}
end

local function on_init_size_calculation(self)
	local dummy_id = factory.create("#hex_factory", nil, nil, data(1, 1), 1)
	local node_script_url = msg.url(nil, dummy_id, "single_hex")
	height = go.get(node_script_url, "height")
	go.delete(dummy_id)
	
	scale = self.wannted_height_of_single_hex / height
	size = height / 2 * scale
	horizontal_spacing = math.sqrt(3) * size 
	vertical_spacing = 3/2 * size
end

local function vector_by_row_column(row_index, column_index)
	local center = go.get_position();
	local center_node_column_index = 5
	local center_node_row_index = 5
	local node_x = center.x - ((center_node_column_index - column_index) * horizontal_spacing + HEX_GRID_UTILS.row_even_offset(row_index, horizontal_spacing))
	local node_y = center.y - ( center_node_row_index - row_index) * vertical_spacing
	return vmath.vector3(node_x, node_y, 0)
end

local function create_grid()
	for row_index = 1, grid_height do
		local column_table = {}
		for column_index = 1, grid_width do
			if excluded_coords[row_index] == nil or not UTILS.array_has_value(excluded_coords[row_index], column_index) then
				local hex_id = factory.create("#hex_factory", vector_by_row_column(row_index, column_index), nil, data(column_index, row_index), scale)
				column_table[column_index] = { hex_id = hex_id }
			end
		end
		coordinate_table[row_index] = column_table
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	on_init_size_calculation(self)
	create_grid()
	position_for_node_x1_y1 = vector_by_row_column(1, 1)
	EVENT_REGISTRY.registry(C.GIVE_PLAYER_TO_PLACE_TILE, msg.url())
	EVENT_REGISTRY.registry(C.MAP_SET_CLICKABLE, msg.url())
	EVENT_REGISTRY.registry(C.MAP_SET_TILE, msg.url())
	EVENT_REGISTRY.registry(C.MAP_SET_TILE_RECOURCES, msg.url())

	EVENT_REGISTRY.notify(C.HEX_GRID_COMPONENT_LOADED)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(C.MAP_SET_TILE) then
		ASSERTS.positive_number(message.row)
		ASSERTS.positive_number(message.column)
		assert(message.player_color)
		assert(message.tile_type)
		local hex_id = get_hex_id(message.row, message.column)
		if hex_id then
			msg.post(hex_id, message_id, { image_name = tile_type_to_image[message.tile_type], player_color = message.player_color })
		end

	elseif message_id == hash(C.MAP_SET_TILE_RECOURCES) then
		local hex_id = get_hex_id(message.row, message.column)
		local resource_images = {}
		for index, value in ipairs(message.resources) do
			table.insert(resource_images, index, resource_to_image[value]) 
		end
		if hex_id then
			msg.post(hex_id, C.MAP_SET_TILE_RECOURCES, {resources = resource_images} )
		end
	elseif message_id == hash(C.GIVE_PLAYER_TO_PLACE_TILE) then
		msg.post(".", "acquire_input_focus")
		--TODO create pop up with tile, or drag tile under cursor until click
		clickable = true
		on_click = function (hex_id, column, row)
			msg.post(hex_id, C.MAP_SET_TILE, { image_name = tile_type_to_image[message.tile_type], player_color = message.player_color })
			EVENT_REGISTRY.notify(C.MAP_TILE_PLACED, { tile_type = message.tile_type, column = column, row = row})
			msg.post(".", "release_input_focus")
			clickable = false
			on_click = function () print("map clicked") end
		end
	end

	if message_id == hash(C.MAP_SET_CLICKABLE) then
		local input_message_id = message.clickable and "acquire_input_focus" or "release_input_focus"
		msg.post(".", input_message_id)
		print("hex grid ui", input_message_id)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if not clickable then
			print("map not clickable")
		end
		local pos = position_for_node_x1_y1
		local relative_x = action.x - pos.x
		local relative_y = action.y - pos.y
		
		local column, row = HEX_GRID_UTILS.pixel_to_even_r_hex_coordinates(relative_x, relative_y, size)
		
		local hex_id = get_hex_id(row, column)
		if hex_id and clickable then
			pcall(on_click, hex_id, column, row)
		end
	end
end
