-- script for grid state + proxy message to ui

local C = require "utils.message_ids"
local ASSERTS = require "utils.assertions"
local STATE = require "hex_grid.hex_grid_state"

local grid_state

local ocean_coords = {[1] = {7}, [4] = {7,8,9}, [5] = {4,5,6}, [6] = {9}, [8] = {8}, [9] = {4,6,7}}
local non_mars_coords = {[8] = {1}, [9] = {1}}
local noctis_city = {[5] = {3}}
local placement_bonuses_coords = { -- TODO вынести в файл
	[1] = { 
		[3] = { C.RECOURCE_STEEL },
		[4] = { C.RECOURCE_STEEL, C.RECOURCE_STEEL },
		[7] = { C.RECOURCE_TITANIUM, C.RECOURCE_TITANIUM },
	},
	[2] = {
		[3] = { C.RECOURCE_STEEL, C.RECOURCE_STEEL },
		[5] = { C.PLAYER_DRAW_CARD },
		[6] = { C.PLAYER_DRAW_CARD },
		[8] = { C.RECOURCE_TITANIUM },
	},
	[3] = {
		[7] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
	},
	[4] = {
		[2] = { C.RECOURCE_PLANT },
		[3] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[4] = { C.RECOURCE_PLANT },
		[5] = { C.RECOURCE_PLANT },
		[6] = { C.RECOURCE_PLANT },
		[7] = { C.RECOURCE_PLANT },
		[8] = { C.RECOURCE_PLANT },
		[9] = { C.RECOURCE_PLANT },
	},
	[5] = {
		[1] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[2] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[3] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[4] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[5] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[6] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[7] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[8] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
		[9] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
	},
	[6] = {
		[2] = { C.RECOURCE_PLANT, C.RECOURCE_STEEL },
		[3] = { C.RECOURCE_PLANT },
		[4] = { C.RECOURCE_PLANT },
		[5] = { C.RECOURCE_PLANT },
		[6] = { C.RECOURCE_PLANT },
		[7] = { C.RECOURCE_PLANT },
		[8] = { C.RECOURCE_PLANT },
		[9] = { C.RECOURCE_PLANT, C.RECOURCE_PLANT },
	},
	[7] = { 
		[2] = { C.PLAYER_DRAW_CARD },
		[8] = { C.RECOURCE_STEEL },
	},
	[8] = { 
		[4] = { C.RECOURCE_STEEL },
		[8] = { C.PLAYER_DRAW_CARD, C.PLAYER_DRAW_CARD },
	},
	[9] = { 
		[3] = { C.RECOURCE_STEEL, C.RECOURCE_STEEL },
		[4] = { C.RECOURCE_STEEL, C.RECOURCE_STEEL },
		[6] = { C.PLAYER_DRAW_CARD },
	},
	
}

local function set_map_recources()
	for row_index, column_indexes in pairs(placement_bonuses_coords) do
		for column_index, resource_list in pairs(column_indexes) do
			if #resource_list > 0 then
				msg.post("#hex_grid_ui", C.MAP_SET_TILE_RECOURCES, {
					row = row_index,
					column = column_index,
					resources = resource_list
				})
			end
		end
	end
end

local function set_map_oceans()
	for row_index, column_indexes in pairs(ocean_coords) do
		for k, column_index in pairs(column_indexes) do
			msg.post("#hex_grid_ui", C.MAP_SET_TILE, {
				tile_type = C.TILE_TYPE_EMPTY_OCEAN,
				row = row_index, 
				column = column_index, 
				player_color = C.TRANSPARENT_COLOR
			})
		end
	end
end

function init(self)
	grid_state = STATE.new()
	grid_state:set_ocean_coords(ocean_coords)
	grid_state:set_non_mars_coords(non_mars_coords)
	grid_state:set_noctis_city(noctis_city)
	grid_state:set_placement_bonuses_coords(placement_bonuses_coords)
	
	set_map_recources()
	set_map_oceans()
end


function on_message(self, message_id, message, sender)
	if message_id == hash(C.MAP_SET_CLICKABLE) then
		local input_message_id = message.clickable and "acquire_input_focus" or "release_input_focus"
		msg.post("#hex_grid_ui", input_message_id)
		print("hex grid ui", input_message_id)
	end
	if message_id == hash(C.MAP_SET_TILE) then
		local row = message.row
		local column = message.column
		local tile_type = message.tile_type
		
		ASSERTS.positive_number(row)
		ASSERTS.positive_number(column)
		assert(message.player_color)
		assert(tile_type)

		grid_state:set_with_validation(row, column, message.player_color, tile_type)

		msg.post("#hex_grid_ui", C.MAP_SET_TILE, message)
		-- msg.post("#hex_grid_ui", "release_input_focus")
	end
	
end
