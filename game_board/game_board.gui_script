local C = require "utils.message_ids"
local ACTION_STATE = require "action.action_state"

local function test_random_tile_name()
	local num = math.random(1, 3)
	return (num == 1 and C.TILE_TYPE_CITY) or (num == 2 and C.TILE_TYPE_TREE) or (num == 3 and C.TILE_TYPE_OCEAN)
end

local function test_random_clickable()
	local num = math.random(1, 2)
	return num == 1
end

local function update_current_player_actions(self)
	self.player_list[self.current_player_index]:spend_action()
end

local function choose_next_player(self)
	self.current_player_index = self.current_player_index + 1
	local player = self.player_list[self.current_player_index]
	if player == nil then
		self.current_player_index = 1
	end
end

local function next_round(self)
	self.round = self.round + 1
	for player_index, action_state in ipairs(self.player_list) do
		action_state:on_next_round()
	end
	print("round " .. self.round)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.buttons = { "debug_action" }
	self.round = 1
	self.player_list = { ACTION_STATE.new() }
	self.current_player_index = 1;
end

function on_message(self, message_id, message, sender)
	if message_id == hash(C.PLAYER_SKIP_TURN) then
		local player_actions = self.player_list[self.current_player_index]
		player_actions:skip_turn()
		choose_next_player(self)
		if self.current_player_index == 1 then
			next_round(self)
		end
		msg.post("/action_bar_ui#ui_action", C.UI_STATE_SET_ACTIONS, { actions =  player_actions:get_actions() } );
	end

	--TEST/DEBUG events to guis
	if message_id == hash(C.PLAYER_MAP_CLICKED) then
		print("C.PLAYER_MAP_CLICKED")
		msg.post("/hex_grid#hex_grid_controller", C.MAP_SET_TILE, { tile_type = test_random_tile_name(), column =  message.column, row = message.row, player_color = C.PLAYER_1_COLOR } );
	end
	if message_id == hash(C.MAP_TILE_PLACED) then
		print("C.MAP_TILE_PLACED", message.tile_type, message.row, message.column)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed == true then
		for i, button_name in ipairs(self.buttons) do
			if gui.pick_node(gui.get_node(button_name .. "/button" ), action.x, action.y) then
				print("button pressed ", button_name)
				if button_name == ("debug_action") then
					--TEST/DEBUG events to guis
					msg.post("#top_bar", C.PLAYER_INCOME_CHANGED, {[C.RECOURCE_GOLD] = 2} );
					msg.post("/planet_parameters#planet_parameters", C.PLANET_PARAMETERS, {[C.PLANET_OCEANS] = math.random(9), [C.PLANET_TEMPERATURE] = math.random(-15, 4) * 2} );
					msg.post("/terraform_rating_bar#terraform_rating_bar", C.PLAYER_TERRAFORM_RATING, {player_id = math.random(5), terraform_rating = math.random(50)} );
					msg.post("/milistones_awards", C.TAKE_MILESTONE_OR_AWARD, { name = C.MILESTONE_TERRAFORMER, player_id = 1 } );
					msg.post("/hex_grid#hex_grid_controller", C.MAP_SET_TILE, { tile_type = test_random_tile_name(), column =  math.random(9), row = math.random(9), player_color = C.PLAYER_1_COLOR } );
					msg.post("/hex_grid#hex_grid_controller", C.MAP_SET_CLICKABLE, { clickable =  test_random_clickable() } );
					update_current_player_actions(self)
					msg.post("/action_bar_ui#ui_action", C.UI_STATE_SET_ACTIONS, { actions =  self.player_list[self.current_player_index]:get_actions() } );
				end
			end
		end
	end	
end

