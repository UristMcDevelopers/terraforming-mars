local C = require "utils.message_ids"
local EVENT_REGISTRY = require "utils.event_regisrty"
local GAME_STATE = require "logic.game_state"

local GameState

function init(self)
	msg.post(".", "acquire_input_focus")
	GameState = GAME_STATE.new() --TODO add load from file

	
	EVENT_REGISTRY.registry(C.UI_CLICK_AVAILABLE_ACTIONS, msg.url())
	EVENT_REGISTRY.registry(C.PLAYER_CHOSE_ACTION_TO_PLAY, msg.url())
end

function on_message(self, message_id, message, sender)
	if message_id == hash(C.PLAYER_SKIP_TURN) then
		GameState:skip_turn()
		msg.post("/action_bar_ui#ui_action", C.UI_STATE_SET_ACTIONS, { actions =  GameState:get_player():get_actions() } );
	elseif message_id == hash(C.PLAYER_SPEND_ACTION) then
		GameState:spend_action()
		msg.post("/action_bar_ui#ui_action", C.UI_STATE_SET_ACTIONS, { actions =  GameState:get_player():get_actions() } );
	elseif message_id == hash(C.PLAYER_MAP_CLICKED) then
		print("C.PLAYER_MAP_CLICKED", message.row, message.column)
		-- msg.post("/hex_grid#hex_grid_controller", C.MAP_SET_TILE, { tile_type = test_random_tile_name(), column =  message.column, row = message.row, player_color = C.PLAYER_1_COLOR } );
	end
	if message_id == hash(C.MAP_TILE_PLACED) then
		print("C.MAP_TILE_PLACED", message.tile_type, message.row, message.column)
	end

	if message_id == hash(C.UI_CLICK_AVAILABLE_ACTIONS) then
		EVENT_REGISTRY.notify(C.UI_SHOW_ACTIONS_GRID, { actions = { {action_name = "TEST ACTION1"}, {action_name = "TEST ACTION2"}, {action_name = "TEST ACTION3"}, {action_name = "TEST ACTION4"}, {action_name = "TEST ACTION5"}} })
	elseif message_id == hash(C.PLAYER_CHOSE_ACTION_TO_PLAY) then
		pprint("player played card", message)
	end
end

function on_input(self, action_id, action)

end

