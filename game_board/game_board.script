local C = require "utils.message_ids"
local EVENT_REGISTRY = require "utils.event_regisrty"
local GAME_STATE = require "logic.game_state"

local GameState

function init(self)
	msg.post(".", "acquire_input_focus")
	GameState = GAME_STATE.new() --TODO add load from file

	EVENT_REGISTRY.registry(C.UI_CLICK_AVAILABLE_ACTIONS, msg.url())
	EVENT_REGISTRY.registry(C.PLAYER_CHOSE_ACTION_TO_PLAY, msg.url())
	EVENT_REGISTRY.registry(C.TAKE_MILESTONE_OR_AWARD, msg.url())
	EVENT_REGISTRY.registry(C.INCREASE_PLANET_PARAMETER, msg.url())
	EVENT_REGISTRY.registry(C.PLAYER_RESOURCES_CHANGED, msg.url())
	EVENT_REGISTRY.registry(C.PLAYER_SKIP_TURN, msg.url())
	EVENT_REGISTRY.registry(C.MAP_TILE_PLACED, msg.url())
	EVENT_REGISTRY.registry(C.HEX_GRID_COMPONENT_LOADED, msg.url())
	EVENT_REGISTRY.registry(C.INCREASE_TERRAFORM_RATING, msg.url())
end

function on_message(self, message_id, message, sender)
	if message_id == hash(C.PLAYER_SKIP_TURN) then
		GameState:skip_turn()
		EVENT_REGISTRY.notify(C.UI_STATE_SET_ACTIONS, { actions =  GameState:get_player():get_actions() })
		EVENT_REGISTRY.notify(C.UI_UPDATE_RESOURCES, GameState:get_player():get_resources()) --TODO im not shure if we need send it from here. maybe from state itself

	elseif message_id == hash(C.PLAYER_RESOURCES_CHANGED) then
		GameState:get_player():update_resources(message)
		EVENT_REGISTRY.notify(C.UI_UPDATE_RESOURCES, GameState:get_player():get_resources())
		
	elseif message_id == hash(C.INCREASE_TERRAFORM_RATING) then
		GameState:get_player():increase_terraform_rating()
		EVENT_REGISTRY.notify(C.PLAYER_TERRAFORM_RATING, { player_id = GameState:get_player():get_id(), terraform_rating = GameState:get_player():get_terraform_rating() })

	elseif message_id == hash(C.MAP_TILE_PLACED) then
		GameState:tile_placed(message.tile_type, message.row, message.column)
		EVENT_REGISTRY.notify(C.UI_UPDATE_RESOURCES, GameState:get_player():get_resources())

	elseif message_id == hash(C.UI_CLICK_AVAILABLE_ACTIONS) then
		EVENT_REGISTRY.notify_with_large_message(C.UI_SHOW_ACTIONS_GRID, { actions = GameState:get_available_actions() })

	elseif message_id == hash(C.PLAYER_CHOSE_ACTION_TO_PLAY) then
		local played_action = message
		pprint("player played action", message)
		GameState:spend_action(played_action)
		EVENT_REGISTRY.notify(C.UI_STATE_SET_ACTIONS, { actions =  GameState:get_player():get_actions() })
		EVENT_REGISTRY.notify(C.UI_UPDATE_RESOURCES, GameState:get_player():get_resources())

	elseif message_id == hash(C.TAKE_MILESTONE_OR_AWARD) then
		GameState:take_milestone_or_award(message.name)
		local ma = GameState:get_milestones_awards()
		EVENT_REGISTRY.notify(C.UI_UPDATE_MILESTONES_AWARDS, ma)

	elseif message_id == hash(C.INCREASE_PLANET_PARAMETER) then
		for param_name, details in pairs(message) do
			GameState:get_planet():increase(param_name, details.times)
		end
		EVENT_REGISTRY.notify(C.UI_UPDATE_PLANET_PARAMETERS, GameState:get_planet():get())

	elseif message_id == hash(C.HEX_GRID_COMPONENT_LOADED) then
		GameState:render_map()
	end
end

function on_input(self, action_id, action)

end

