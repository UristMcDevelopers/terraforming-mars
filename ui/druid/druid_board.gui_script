local C = require("utils.message_ids")
local EVENT_REGISTRY = require("utils.event_regisrty")
local druid = require("druid.druid")
-- local grid = require("ui.druid.choice_popup.choice_popup")
local choice_popup = require("ui.druid.choice_popup.choice_popup")

local function on_button_callback(self)
	print("The button clicked!")
	EVENT_REGISTRY.notify(C.UI_CLICK_AVAILABLE_ACTIONS)
end

local function create_choice_popup(self, message)
	if self.choice_popup == nil or self.choice_popup:is_deleted() then
		self.choice_popup = self.druid:new(choice_popup, "choice_popup")
		self.choice_popup:set_actions(message.actions)
		self.choice_popup:on_confirm(function (selected_nodes) 
			assert(#selected_nodes == 1)
			EVENT_REGISTRY.notify(C.PLAYER_CHOSE_ACTION_TO_PLAY, selected_nodes[1])
		 end)
		self.choice_popup:set_multi_choice(false)
	else
		print("pop up window already created, skipping")
	end
end


function init(self)
	msg.post(".", "acquire_input_focus")
	EVENT_REGISTRY.registry(C.UI_SHOW_ACTIONS_GRID, msg.url())
	
	self.druid = druid.new(self)
	self.button = self.druid:new_button("button_available_actions/button", on_button_callback)
	gui.set_enabled(gui.get_node("choice_popup/root"), false)
end

function final(self)
	self.druid:final()
end

-- "update" is used in progress bar, scroll, and timer basic components
function update(self, dt)
	self.druid:update(dt)
end

-- "on_message" is used for specific Druid events, like language change or layout change
function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	if message_id == hash(C.UI_SHOW_ACTIONS_GRID) then
		create_choice_popup(self, message)
	end
end

-- "on_input" is used in almost all Druid components
-- The return value from `druid:on_input` is required!
function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end