local C = require "utils.message_ids"

local IMAGE_TERRAFORMER = "Terraformer"
local IMAGE_MAYOR = "Mayor"
local IMAGE_GARDENER = "Gardener"
local IMAGE_BUILDER = "Builder"
local IMAGE_PLANNER = "Planner"

local IMAGE_LANDLORD = "Landlord"
local IMAGE_BANKER = "Banker"
local IMAGE_SCIENTIST = "Scientist"
local IMAGE_THERMALIST = "Thermalist"
local IMAGE_MINER = "Miner"

local width_of_single_node = 0
local height_of_single_node = 0
local scale = 1

go.property("reciever_url", hash(""))
go.property("wanted_single_node_height", 80)

local function init_width_height_scale(self)
	local dummy_id = factory.create("#template_factory", nil, nil, { image_name = hash(IMAGE_TERRAFORMER)}, 0)
	local node_script_url = msg.url(nil, dummy_id, "template_milestone")
	width_of_single_node = go.get(node_script_url, "width")
	height_of_single_node = go.get(node_script_url, "height")
	scale = self.wanted_single_node_height / height_of_single_node
	go.delete(dummy_id, true)
end

local function create(table, initial_position)
	for index, milestone_award in ipairs(table) do
		local new_node_position = vmath.vector3(initial_position.x + (index - 1) * width_of_single_node * scale, initial_position.y, 0)
		local node_id = factory.create("#template_factory", new_node_position, nil, { image_name = hash(milestone_award.image_name) }, scale)
		milestone_award.node = node_id
		msg.post(node_id, "set_display_name", { display_name = milestone_award.display_name })
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	init_width_height_scale(self)

	self.milestones = { 
		{ key = C.MILESTONE_TERRAFORMER, display_name = IMAGE_TERRAFORMER, image_name = IMAGE_TERRAFORMER, node = nil, is_taken = false },
		{ key = C.MILESTONE_MAYOR, display_name = IMAGE_MAYOR, image_name = IMAGE_MAYOR, node = nil, is_taken = false },
		{ key = C.MILESTONE_GARDENER, display_name = IMAGE_GARDENER, image_name = IMAGE_GARDENER, node = nil, is_taken = false },
		{ key = C.MILESTONE_BUILDER, display_name = IMAGE_BUILDER, image_name = IMAGE_BUILDER, node = nil, is_taken = false },
		{ key = C.MILESTONE_PLANNER, display_name = IMAGE_PLANNER, image_name = IMAGE_PLANNER, node = nil, is_taken = false },
	}
	self.awards = { 
		{ key = C.AWARD_LANDLORD, display_name = IMAGE_LANDLORD, image_name = IMAGE_LANDLORD, node = nil, is_taken = false },
		{ key = C.AWARD_BANKER, display_name = IMAGE_BANKER, image_name = IMAGE_BANKER, node = nil, is_taken = false },
		{ key = C.AWARD_SCIENTIST, display_name = IMAGE_SCIENTIST, image_name = IMAGE_SCIENTIST, node = nil, is_taken = false },
		{ key = C.AWARD_THERMALIST, display_name = IMAGE_THERMALIST, image_name = IMAGE_THERMALIST, node = nil, is_taken = false },
		{ key = C.AWARD_MINER, display_name = IMAGE_MINER, image_name = IMAGE_MINER, node = nil, is_taken = false },
	}

	local position = go.get_position()
	create(self.milestones, position)
	local awards_position = vmath.vector3(position.x, position.y - height_of_single_node * scale, 0)
	create(self.awards, awards_position)
	
end

local function find_node_with_name(list, name)
	for i, milestones in ipairs(list) do
		if milestones.key == name then
			milestones.is_taken = true
			return milestones.node
		end
	end
	return nil
end

function on_message(self, message_id, message, sender)
	if message_id == hash(C.REGISTRY) then
		self.reciever_url = sender
	elseif message_id == hash(C.TAKE_MILESTONE_OR_AWARD) then
		local node = find_node_with_name(self.milestones, message.name) or find_node_with_name(self.awards, message.name)
		msg.post(node, C.TAKE_MILESTONE_OR_AWARD, message)
	end
end
